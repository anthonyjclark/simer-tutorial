---
title: "SimER Tutorial"
author: Anthony J. Clark
format:
  revealjs:
    progress: true
    controls: true
    controls-layout: bottom-right
    toc: true
    syntax-definitions:
      - pseudocode.xml
    highlight-style: pygments
---

# Introduction


## Format

This tutorial will follow a format in which:

- We'll get on the same page with respect to terminology
- Loop
  - I'll present for a bit
  - I'll ask you all to read through an exercise
  - We'll have time for discussion
- We'll cover a more complete example in full

## Evolutionary Robotics

The use of evolutionary algorithms to explore the design space of robots and their control software.

## Research Questions

There is a wide variety of research in evolutionary robotics, but I'll focus on:

1. Optimization and novelty (application-based)
2. Algorithm design (theory-based)

## General Algorithm

```{mermaid}
%%| fig-align: center

flowchart LR
    Init[Initialize] --> Eval[Evaluate]
    Eval --> Stop{Stop?}
    Stop --Yes--> Retn[Return]
    Stop --No--> Sele[Select]
    Sele --> Modi[Modify]
    Modi --> Evl2[Evaluate]
    Evl2 --> Comb[Combine]
    Comb --> Stop
```

TODO: fix flow chart and pseudocode

```{.pseudocode}
population = Initialize()
population = Evaluate(population)

LOOP
  IF Stop(fitnesses) THEN BREAK
  selected = Select(population)
  children = Modify(selected)
  children = Evaluate(children)
  population = Combine(population, children)

RETURN population
```

```python
population = initialize(POPULATION_SIZE)
population = evaluate(population)

for generation in range(NUM_GENERATIONS):
    if stop(population):
        break

    # Tournament selection
    selected = select(population)
    # Just mutation (no crossover?); maybe DE?
    children = modify(selected)
    children = evaluate(children)
    # Elitism of 1?
    population = combine(population, children)
```

```python

Fitness = tuple[float, float]
Genome = list[float]
Individual = tuple[Genome, Fitness]
Population = list[Individual]

def initialize(size: int) -> Population: ...
def evaluate(pop: Population) -> Population: ...
def stop(pop: Population) -> bool: ...
def select(pop: Population) -> Population: ...
def modify(pop: Population) -> Population: ...
def combine(pop1: Population, pop2: Population) -> Population: ...
```

# Practical Considerations

## Practical Considerations

1. Simulation, feasibility, and reality gap
2. Computational resources (headless, parallelism, etc.)
3. Management (analysis, visualizing, plotting, etc.)
4. Research management (tracking, reproducibility, collaboration, etc.)
5. Validation on hardware

Major challenge: "reality gap"

## Simulation

- Follow a gradient of feasibility to provide a better "gradient"
- Scale your parameters for numerical stability
- ...

## Parallelism

You'll want to run your experiments on a compute cluster if possible.

1. Parallelize replicate experiments (different random seeds)
2. Parallelize across generations (if mixing populations)
3. Parallelize across populations (multiple population per replicate)
4. Parallelize across individuals (multiple individuals per population)
5. Parallelize across trials (multiple trials per individual)

## Parallelism Advice

- Plan to use $N - 2$ cores, where $N$ is the number of cores available
- Use a tool like [GNU Parallel](https://www.gnu.org/software/parallel/) at the replicate level
- Use a library like [Python multiprocessing](https://docs.python.org/3/library/multiprocessing.html) at lower levels
- Consider what you need to evaluate for early stopping when making your choices between higher and lower levels of parallelism
  - Do you care more about the variance across replicates? Parallelize at the replicate level
  - Do you care more about the performance of a single replicate? Parallelize at the individual level

## Experiment Management

- wandb, for example

# Exemplar

## Problem Statement

Objective: maximize the distance traveled by an autonomous wheeled mobile robot (WMR) in a fixed amount of time.

## Online Demos

Starting with [Analytical Models](demos/1-analytical.qmd)

## Full Examples

Full description at [Full Example](demos/5-full-example.qmd).
